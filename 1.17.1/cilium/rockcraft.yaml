name: cilium
summary: Cilium agent rock for the Cilium CNI.
description: This rock is a drop in replacement for the cilium/cilium image.
version: "1.17.1"
license: Apache-2.0

# Note(Reza): We are hardcoding the dynamic libraries path inside the cilium 
# part binaries. Change them and also the LD_LIBRARY_PATH in the wrapper codebase 
# accodingly when you change the base snap.
base: ubuntu@22.04
build-base: ubuntu@22.04
platforms:
  amd64:
  arm64:

package-repositories:
  - type: apt
    formats: [deb-src]
    components: [main restricted universe multiverse]
    suites: [jammy, jammy-updates]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://archive.ubuntu.com/ubuntu
  - type: apt
    formats: [deb-src]
    components: [main restricted universe multiverse]
    suites: [jammy-security]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://security.ubuntu.com/ubuntu
  - type: apt
    formats: [deb, deb-src]
    components: [main]
    suites: [llvm-toolchain-jammy-17]
    key-id: 6084F3CF814B57C1CF12EFD515CF4D18AF4F7421
    url: http://apt.llvm.org/jammy/

environment:
  HUBBLE_SERVER: "unix:///var/run/cilium/hubble.sock"
  INITSYSTEM: "SYSTEMD"

services:
  cilium:
    command: /usr/bin/cilium-dbg
    override: replace
    startup: enabled

parts:
  # https://github.com/cilium/proxy/blob/v1.31/Dockerfile.builder#L44-L46
  bazelisk:
    plugin: nil
    build-packages:
      - wget
    overlay-script: |
      wget https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-$CRAFT_ARCH_BUILD_FOR
      mv bazelisk-linux-$CRAFT_ARCH_BUILD_FOR /usr/bin/bazelisk
      chmod +x /usr/bin/bazelisk
      ln -sf /usr/bin/bazelisk /usr/bin/bazel

  # https://github.com/cilium/proxy/blob/v1.31/Dockerfile#L17-L24
  cilium-envoy:
    after: [bazelisk]
    plugin: make
    source-type: git
    source: https://github.com/cilium/proxy.git
    source-tag: v1.31
    source-depth: 1
    build-packages:
      - autoconf
      - automake
      - cmake
      - coreutils
      - curl
      - git
      - libtool
      - make
      - ninja-build
      - patch
      - patchelf
      - python3
      - python-is-python3
      - unzip
      - virtualenv
      - wget
      - zip
      - libc6-dev
      - gcc
      - binutils
      - clang-17
      - clang-tools-17
      - lldb-17
      - lld-17
      - clang-format-17
      - libc++-17-dev
      - libc++abi-17-dev
    override-build: |
      export PKG_BUILD=1
      export DESTDIR=$CRAFT_PART_INSTALL
      export EMAIL=root@localhost
      git am --ignore-whitespace $CRAFT_PROJECT_DIR/envoy-fixes.patch

      make -C proxylib all
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/
      cp proxylib/libcilium.so $CRAFT_PART_INSTALL/usr/lib/
      cp proxylib/libcilium.so /usr/lib/
      git rev-parse HEAD >SOURCE_VERSION
      make bazel-bin/cilium-envoy
      make install
      rm -rf /root/.cache/bazel

  builder-img-deps:
    plugin: nil
    build-packages:
      - unzip
      - binutils
      - coreutils
      - curl
      - gcc
      - git
      - libc6-dev
      - make

  build-deps:
    plugin: nil
    build-snaps:
      # https://github.com/cilium/cilium/blob/v1.17.1/images/builder/Dockerfile#L7
      - go/1.23-fips/stable
    build-packages:
      - autoconf
      - automake
      - autopoint
      - autotools-dev
      - build-essential
      - pkg-config
      # https://github.com/cilium/cilium/blob/v1.17.1/images/builder/install-protoc.sh
      - protobuf-compiler

  # https://github.com/cilium/cilium/blob/v1.17.1/images/builder/install-protoplugins.sh
  protoplugins:
    plugin: nil
    overlay-script: |
      go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.5.1
      go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.5
      go install github.com/mfridman/protoc-gen-go-json@v1.5.0
      go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@v1.5.1

  runtime-img-deps:
    plugin: nil
    stage-packages:
      - jq
      - bash-completion
      - iproute2
      - ipset
      - kmod
      - ca-certificates
      - libz3-dev

  iptables:
    plugin: nil
    stage-packages:
      - iptables

  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/Dockerfile#L46-L47
  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/iptables-wrapper-installer.sh
  iptables-wrapper:
    after: [iptables]
    plugin: nil
    source-type: file
    # NOTE: we maintain out own version of ./iptables-wrapper-installer.sh.
    source: ./iptables-wrapper-installer.sh
    build-environment:
    - OVERRIDE_PATH: "$CRAFT_PRIME/usr/sbin"
    - OVERRIDE_SBIN: "/usr/sbin"
    - OVERRIDE_ALTSTYLE: "none"
    override-prime: |
      craftctl default
      bash $CRAFT_PART_BUILD/iptables-wrapper-installer.sh --no-sanity-check

  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/Dockerfile#L9
  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/Dockerfile#L50
  # https://github.com/cilium/image-tools/blob/master/images/bpftool/Dockerfile#L12-L13
  # https://github.com/cilium/image-tools/blob/master/images/bpftool/checkout-linux.sh#L11-L12
  bpftool:
    plugin: make
    source-type: git
    source: https://github.com/libbpf/bpftool.git
    source-tag: v7.4.0
    source-depth: 1
    source-subdir: src
    source-submodules:
      - "libbpf"
    build-packages:
      - xz-utils
      - libzstd-dev
      - zlib1g-dev
      - libelf-dev
      - libiberty-dev
      - llvm-17
      - clang-17
      - clang-tools-17
      - lldb-17
      - lld-17
      - clang-format-17
      - libc++-17-dev
      - libc++abi-17-dev
    build-environment:
      - EXTRA_CFLAGS: --static
      - LLVM_CONFIG: "/usr/bin/llvm-config-17"
      - LLVM_STRIP: "/usr/bin/llvm-strip-17"
    override-build: |
      # libelf requires zstd on Ubuntu 24.04, this hasn't been addressed
      # in bpftool yet.
      sed -i 's/-lelf/-lelf -lzstd/g' src/Makefile

      make -C src -j "$(nproc)"
      strip src/bpftool

      mkdir -p $CRAFT_PART_INSTALL/usr/local/sbin/
      cp ./src/bpftool $CRAFT_PART_INSTALL/usr/local/sbin/
      chmod 755 $CRAFT_PART_INSTALL/usr/local/sbin/bpftool

  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/Dockerfile#L20-L23
  gops:
    after: [build-deps]
    plugin: go
    source-type: git
    # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/build-gops.sh#L11-L12
    source: https://github.com/google/gops.git
    source-tag: v0.3.27
    source-depth: 1
    build-environment:
      - CGO_ENABLED: 1
      - GOTOOLCHAIN: local
      - GOEXPERIMENT: opensslcrypto
    override-build: |
      go install -ldflags "-s -w" ./...

  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/Dockerfile#L24-L26
  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/download-cni.sh#L13
  # https://github.com/cilium/cilium/blob/v1.17.1/images/runtime/cni-version.sh#L2
  cni-plugins:
    after: [build-deps]
    plugin: go
    source-type: git
    source: https://github.com/containernetworking/plugins.git
    source-tag: v1.6.0
    source-depth: 1
    build-environment:
      - CGO_ENABLED: 1
      - GOTOOLCHAIN: local
      - GOEXPERIMENT: opensslcrypto
    override-build: |
      ./build_linux.sh
      strip $CRAFT_PART_BUILD/bin/loopback
      cp -r $CRAFT_PART_BUILD/bin $CRAFT_PART_INSTALL
    stage:
      - -bin
    organize:
      bin/loopback: cni/loopback

  # https://github.com/cilium/cilium/blob/v1.17.1/images/cilium/Dockerfile#L45-L57
  hubble-completion:
    after: [build-deps]
    plugin: make
    source-type: git
    source: "https://github.com/cilium/hubble.git"
    # NOTE: Hubble has same release versioning scheme as Cilium itself.
    source-tag: v1.17.1
    source-depth: 1
    override-build: |
      craftctl default
      mkdir -p $CRAFT_PART_INSTALL/etc/bash_completion.d
      $CRAFT_PART_INSTALL/usr/local/bin/hubble completion bash > $CRAFT_PART_INSTALL/etc/bash_completion.d/hubble

  # NOTE(Hue): Inspired from https://discourse.ubuntu.com/t/build-rocks-with-ubuntu-pro-services/57578
  openssl:
    plugin: nil
    stage-packages:
      - openssl-fips-module-3 # a Pro only FIPS package for openssl
      - openssl # now automatically selected from fips-preview

  wrapper:
    plugin: dump
    source: .
    source-type: local
    stage:
    - wrapper
  
  cilium:
    after: [build-deps, builder-img-deps, wrapper]
    plugin: make
    source-type: git
    source: https://github.com/cilium/cilium.git
    source-tag: v1.17.1
    build-packages:
      - clang-17
      - llvm-17
    build-environment:
     - DISABLE_ENVOY_INSTALLATION: 1
     - CGO_ENABLED: 1
     - GOTOOLCHAIN: local
     - GOEXPERIMENT: opensslcrypto
     - PKG_BUILD: 1
     - NOSTRIP: 0
     - NOOPT: 0
    override-build: |
      export DESTDIR=$CRAFT_PART_INSTALL

      export LIBRARY_PATH=/snap/core22/current/usr/lib/x86_64-linux-gnu
      export DYNAMIC_LINKER_PATH=/snap/core22/current/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2

      if [ "$CRAFT_ARCH_BUILD_FOR" = "arm64" ]; then
        export LIBRARY_PATH=/snap/core22/current/usr/lib/aarch64-linux-gnu
        export DYNAMIC_LINKER_PATH=/snap/core22/current/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
      fi

      # NOTE (mateoflorido): Patch Cilium Makefiles to use FIPS-compatible build flags
      find . -name "Makefile*" -exec sed -i 's/CGO_ENABLED=0/CGO_ENABLED=1/g' {} \;

      make build-container SUBDIRS_CILIUM_CONTAINER='daemon cilium-health bugtool'
      make build-container SUBDIRS_CILIUM_CONTAINER='cilium-dbg tools/mount tools/sysctlfix plugins/cilium-cni' GO_BUILD_LDFLAGS='-linkmode external -extldflags "-Wl,-dynamic-linker,${DYNAMIC_LINKER_PATH} -Wl,-rpath,${LIBRARY_PATH}"'

      # NOTE(reza): build a wrapper binary around cilium-sysctlfix and cilium-cni to set the correct LD_LIBRARY_PATH at runtime
      cp -r $CRAFT_STAGE/wrapper  $CRAFT_PART_BUILD/wrapper
      mkdir -p $CRAFT_PART_BUILD/wrapper/bin
      cp $CRAFT_PART_BUILD/tools/sysctlfix/cilium-sysctlfix $CRAFT_PART_BUILD/plugins/cilium-cni/cilium-cni $CRAFT_PART_BUILD/cilium-dbg/cilium-dbg $CRAFT_PART_BUILD/wrapper/bin


      CGO_ENABLED=0 GOEXPERIMENT= GOTOOLCHAIN=auto go build -o $CRAFT_PART_BUILD/tools/sysctlfix/cilium-sysctlfix -ldflags "-X main.binaryName=cilium-sysctlfix -X main.ldLibraryPath=${LIBRARY_PATH}" wrapper/main.go
      CGO_ENABLED=0 GOEXPERIMENT= GOTOOLCHAIN=auto go build -o $CRAFT_PART_BUILD/plugins/cilium-cni/cilium-cni -ldflags "-X main.binaryName=cilium-cni -X main.ldLibraryPath=${LIBRARY_PATH}" wrapper/main.go
      CGO_ENABLED=0 GOEXPERIMENT= GOTOOLCHAIN=auto go build -o $CRAFT_PART_BUILD/cilium-dbg/cilium-dbg -ldflags "-X main.binaryName=cilium-dbg -X main.ldLibraryPath=${LIBRARY_PATH}" wrapper/main.go


      make install-container-binary
      make install-bash-completion
      make licenses-all

      echo 'install_cni "/usr/bin/cilium-dbg"' >> $CRAFT_PART_BUILD/plugins/cilium-cni/install-plugin.sh

      cp $CRAFT_PART_BUILD/LICENSE.all  $CRAFT_PART_INSTALL/
      cp $CRAFT_PART_SRC/images/cilium/init-container.sh $CRAFT_PART_INSTALL/
      cp $CRAFT_PART_BUILD/plugins/cilium-cni/install-plugin.sh $CRAFT_PART_INSTALL/
      cp $CRAFT_PART_SRC/plugins/cilium-cni/cni-uninstall.sh $CRAFT_PART_INSTALL/

      find $CRAFT_PART_INSTALL -type f -executable -exec sh -c 'objcopy --strip-all ${0}' {} \;
    override-prime: |
      craftctl default
      rm -rf /root/.cache/go-build

  symlink-ld:
    plugin: nil
    override-build: |
      if [ "$CRAFT_ARCH_BUILD_FOR" = "arm64" ]; then
        mkdir -p ${CRAFT_PART_INSTALL}/snap/core22/current/usr/lib/aarch64-linux-gnu
        ln -sf /lib/ld-linux-aarch64.so.1 \
          ${CRAFT_PART_INSTALL}/snap/core22/current/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
      else 
        mkdir -p ${CRAFT_PART_INSTALL}/snap/core22/current/usr/lib/x86_64-linux-gnu
        ln -sf /lib64/ld-linux-x86-64.so.2 \
          ${CRAFT_PART_INSTALL}/snap/core22/current/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      fi
  llvm:
    plugin: nil
    build-packages:
      # Required for `apt-get source`
      - dpkg-dev
    override-pull: |
      mkdir -p /tmp/llvm
      cd /tmp/llvm
      apt-get source -y llvm-toolchain-17
      cp -r llvm-toolchain-17-*/. $CRAFT_PART_SRC
    override-build: |
      apt-get build-dep -y llvm-toolchain-17

      mkdir -p llvm/build-native
      cd llvm/build-native

      cmake .. -G "Ninja" \
        -DLLVM_TARGETS_TO_BUILD="BPF" \
        -DLLVM_ENABLE_PROJECTS="clang" \
        -DBUILD_SHARED_LIBS="OFF" \
        -DCMAKE_BUILD_TYPE="Release" \
        -DLLVM_BUILD_RUNTIME="OFF" \
        -DCMAKE_INSTALL_PREFIX="/usr/local"

      ninja clang llc

      strip bin/clang
      strip bin/llc

      mkdir -p $CRAFT_PART_INSTALL/usr/local/bin
      cp bin/clang bin/llc $CRAFT_PART_INSTALL/usr/local/bin/
